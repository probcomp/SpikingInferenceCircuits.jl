Last login: Sat Apr 10 11:03:26 on ttys010
georgematheos@Georges-MBP-3 ~ % cd Developer/research/SpikingInferenceCircuits.jl
georgematheos@Georges-MBP-3 SpikingInferenceCircuits.jl % julia-1.6-rc1 
               _
   _       _ _(_)_     |  Documentation: https://docs.julialang.org
  (_)     | (_) (_)    |
   _ _   _| |_  __ _   |  Type "?" for help, "]?" for Pkg help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 1.6.0-rc1 (2021-02-06)
 _/ |\__'_|_|_|\__'_|  |  Official https://julialang.org/ release
|__/                   |

(@v1.6) pkg> activate .
  Activating environment at `~/Developer/research/SpikingInferenceCircuits.jl/Project.toml`

julia> includet("runs/compilation/map_compile.jl")
[ Info: Precompiling Circuits [f5b243b3-c95b-4650-9ac7-659d8f0b0982]
[ Info: Precompiling SpikingCircuits [549ce59a-75fd-4aaf-b0ba-30f73ee3de21]
[ Info: Precompiling SpikingInferenceCircuits [ef694985-0566-4478-a48d-fa3dba6654f1]
Component implemented.
Simulation complete.
ERROR: syntax: invalid function name "Gen.get_score"
Stacktrace:
 [1] eval(x::Expr)
   @ Base.MainInclude client.jl:446
 [2] top-level scope
   @ ~/Developer/research/SpikingInferenceCircuits.jl/runs/compilation/map_compile.jl:8
in expression starting at /Users/georgematheos/Developer/research/SpikingInferenceCircuits.jl/runs/compilation/map_compile.jl:8

julia> @time events = SpikingSimulator.simulate_for_time_and_get_events(implemented, 20.0;
           initial_inputs=(:inputs => :input => 2,),
       )

 12.743036 seconds (16.90 M allocations: 1.042 GiB, 2.64% gc time, 92.74% compilation time)
3510-element Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}:
 (0.0, :sub_gen_fns => (Symbol("##y2#278") => (:cpt_sample_score => (:assmts => (2 => :neuron)))), SpikingCircuits.SpikingSimulator.InputSpike(1))
 (0.0, :sub_gen_fns => (Symbol("##y2#278") => (:cpt_sample_score => (:assmts => (2 => :neuron)))), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.PotentialState(11.512925464970229)))
 (0.0, :sub_gen_fns => (Symbol("##y2#278") => (:cpt_sample_score => (:assmts => 2))), SpikingCircuits.SpikingSimulator.InputSpike(:in))
 (0.0, :sub_gen_fns => (Symbol("##y2#278") => (:cpt_sample_score => :assmts)), SpikingCircuits.SpikingSimulator.InputSpike(1 => 2))
 (0.0, :sub_gen_fns => (Symbol("##y2#278") => :cpt_sample_score), SpikingCircuits.SpikingSimulator.InputSpike(:in_vals => (1 => 2)))
 (0.0, :sub_gen_fns => Symbol("##y2#278"), SpikingCircuits.SpikingSimulator.InputSpike(:inputs => (1 => 2)))
 (0.0, :sub_gen_fns, SpikingCircuits.SpikingSimulator.InputSpike(Symbol("##y2#278") => (:inputs => (1 => 2))))
 (0.0, :sub_gen_fns => (Symbol("##y1#274") => (:cpt_sample_score => (:assmts => (2 => :neuron)))), SpikingCircuits.SpikingSimulator.InputSpike(1))
 (0.0, :sub_gen_fns => (Symbol("##y1#274") => (:cpt_sample_score => (:assmts => (2 => :neuron)))), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.PotentialState(11.512925464970229)))
 (0.0, :sub_gen_fns => (Symbol("##y1#274") => (:cpt_sample_score => (:assmts => 2))), SpikingCircuits.SpikingSimulator.InputSpike(:in))
 (0.0, :sub_gen_fns => (Symbol("##y1#274") => (:cpt_sample_score => :assmts)), SpikingCircuits.SpikingSimulator.InputSpike(1 => 2))
 (0.0, :sub_gen_fns => (Symbol("##y1#274") => :cpt_sample_score), SpikingCircuits.SpikingSimulator.InputSpike(:in_vals => (1 => 2)))
 (0.0, :sub_gen_fns => Symbol("##y1#274"), SpikingCircuits.SpikingSimulator.InputSpike(:inputs => (1 => 2)))
 (0.0, :sub_gen_fns, SpikingCircuits.SpikingSimulator.InputSpike(Symbol("##y1#274") => (:inputs => (1 => 2))))
 (0.0, nothing, SpikingCircuits.SpikingSimulator.InputSpike(:inputs => (:input => 2)))
 (0.0, nothing, SpikingCircuits.SpikingSimulator.InputSpike(:inputs => (:input => 2)))
 (4.40176002968843e-6, :sub_gen_fns => (Symbol("##y1#274") => (:cpt_sample_score => (:assmts => (2 => :neuron)))), SpikingCircuits.SpikingSimulator.OutputSpike(:out))
 (4.40176002968843e-6, :sub_gen_fns => (Symbol("##y1#274") => (:cpt_sample_score => (:assmts => (2 => :neuron)))), SpikingCircuits.SpikingSimulator.InputSpike(2))
 (4.40176002968843e-6, :sub_gen_fns => (Symbol("##y1#274") => (:cpt_sample_score => (:assmts => (2 => :neuron)))), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.PotentialState(-11.512925464970229)))
 (4.40176002968843e-6, :sub_gen_fns => (Symbol("##y1#274") => (:cpt_sample_score => (:assmts => 2))), SpikingCircuits.SpikingSimulator.OutputSpike(:out))
 (4.40176002968843e-6, :sub_gen_fns => (Symbol("##y1#274") => (:cpt_sample_score => (:assmts => 2))), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),))))
 (4.40176002968843e-6, :sub_gen_fns => (Symbol("##y1#274") => (:cpt_sample_score => :assmts)), SpikingCircuits.SpikingSimulator.OutputSpike(:out => 2))
 (4.40176002968843e-6, :sub_gen_fns => (Symbol("##y1#274") => (:cpt_sample_score => :assmts)), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),))))))
 (4.40176002968843e-6, :sub_gen_fns => (Symbol("##y1#274") => (:cpt_sample_score => (:sample_score => (:spikers => 1)))), SpikingCircuits.SpikingSimulator.InputSpike(2))
 â‹®
 (19.06243239202172, :sub_gen_fns => (Symbol("##output#289") => (:sub_gen_fns => (2 => (:sub_gen_fns => (Symbol("##x#258") => (:cpt_sample_score => (:sample_score => (:mux => (1 => (:val => :inhibitor)))))))))), SpikingCircuits.SpikingSimulator.OutputSpike(:out))
 (19.06243239202172, :sub_gen_fns => (Symbol("##output#289") => (:sub_gen_fns => (2 => (:sub_gen_fns => (Symbol("##x#258") => (:cpt_sample_score => (:sample_score => (:mux => (1 => (:val => :inhibitor)))))))))), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),))))
 (19.06243239202172, :sub_gen_fns => (Symbol("##output#289") => (:sub_gen_fns => (2 => (:sub_gen_fns => (Symbol("##x#258") => (:cpt_sample_score => (:sample_score => (:mux => (1 => (:val => :outputter)))))))))), SpikingCircuits.SpikingSimulator.InputSpike(2))
 (19.06243239202172, :sub_gen_fns => (Symbol("##output#289") => (:sub_gen_fns => (2 => (:sub_gen_fns => (Symbol("##x#258") => (:cpt_sample_score => (:sample_score => (:mux => (1 => (:val => :outputter)))))))))), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.PotentialState(0.0)))
 (19.06243239202172, :sub_gen_fns => (Symbol("##output#289") => (:sub_gen_fns => (2 => (:sub_gen_fns => (Symbol("##x#258") => (:cpt_sample_score => (:sample_score => (:mux => (1 => :val))))))))), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0)))))
 (19.06243239202172, :sub_gen_fns => (Symbol("##output#289") => (:sub_gen_fns => (2 => (:sub_gen_fns => (Symbol("##x#258") => (:cpt_sample_score => (:sample_score => (:mux => 1)))))))), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),))))
 (19.06243239202172, :sub_gen_fns => (Symbol("##output#289") => (:sub_gen_fns => (2 => (:sub_gen_fns => (Symbol("##x#258") => (:cpt_sample_score => (:sample_score => :mux))))))), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),))))))
 (19.06243239202172, :sub_gen_fns => (Symbol("##output#289") => (:sub_gen_fns => (2 => (:sub_gen_fns => (Symbol("##x#258") => (:cpt_sample_score => :sample_score)))))), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.302585092994046), SpikingCircuits.PotentialState(-0.9162907318741542))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),))))))))
 (19.06243239202172, :sub_gen_fns => (Symbol("##output#289") => (:sub_gen_fns => (2 => (:sub_gen_fns => (Symbol("##x#258") => :cpt_sample_score))))), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.302585092994046), SpikingCircuits.PotentialState(-0.9162907318741542))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),))))))))))
 (19.06243239202172, :sub_gen_fns => (Symbol("##output#289") => (:sub_gen_fns => (2 => (:sub_gen_fns => Symbol("##x#258"))))), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.302585092994046), SpikingCircuits.PotentialState(-0.9162907318741542))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),))))
 (19.06243239202172, :sub_gen_fns => (Symbol("##output#289") => (:sub_gen_fns => (2 => :sub_gen_fns))), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((##x#258 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.302585092994046), SpikingCircuits.PotentialState(-0.9162907318741542))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)),))))
 (19.06243239202172, :sub_gen_fns => (Symbol("##output#289") => (:sub_gen_fns => 2)), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((##x#258 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.302585092994046), SpikingCircuits.PotentialState(-0.9162907318741542))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)),)),))))
 (19.06243239202172, :sub_gen_fns => (Symbol("##output#289") => :sub_gen_fns), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((##x#258 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.302585092994046), SpikingCircuits.PotentialState(-0.9162907318741542))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)),)),)), SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((##x#258 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.302585092994046), SpikingCircuits.PotentialState(-0.9162907318741542))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)),)),))))))
 (19.06243239202172, :sub_gen_fns => (Symbol("##output#289") => (:multipliers => (1 => :neuron))), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.InputTimesState([Float64[], [4.105912523578731, 0.6176838052402747]])))
 (19.06243239202172, :sub_gen_fns => (Symbol("##output#289") => (:multipliers => 1)), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.InputTimesState([Float64[], [4.105912523578731, 0.6176838052402747]]),))))
 (19.06243239202172, :sub_gen_fns => (Symbol("##output#289") => :multipliers), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.InputTimesState([Float64[], [4.105912523578731, 0.6176838052402747]]),)),))))
 (19.06243239202172, :sub_gen_fns => Symbol("##output#289"), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((##x#258 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.302585092994046), SpikingCircuits.PotentialState(-0.9162907318741542))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)),)),)), SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((##x#258 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.302585092994046), SpikingCircuits.PotentialState(-0.9162907318741542))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)),)),)))), multipliers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.InputTimesState([Float64[], [4.105912523578731, 0.6176838052402747]]),)),))))))
 (19.06243239202172, :sub_gen_fns, SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((##y2#278 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.9957322735539904), SpikingCircuits.PotentialState(-0.7985076962177722))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)), vec1 = SpikingCircuits.SpikingSimulator.CompositeState(()), ##y1#274 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.9957322735539904), SpikingCircuits.PotentialState(-0.7985076962177722))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)), vec2 = SpikingCircuits.SpikingSimulator.CompositeState(()), ##sumvec#284 = SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((##return#268 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970227),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-34.538776394910684),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf), SpikingCircuits.PotentialState(-0.6931471805599454))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)),)),)), SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((##return#268 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970227),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-34.538776394910684),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf), SpikingCircuits.PotentialState(-0.6931471805599454))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)),)),)))),)), ##output#289 = SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((##x#258 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.302585092994046), SpikingCircuits.PotentialState(-0.9162907318741542))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)),)),)), SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((##x#258 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.302585092994046), SpikingCircuits.PotentialState(-0.9162907318741542))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)),)),)))), multipliers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.InputTimesState([Float64[], [4.105912523578731, 0.6176838052402747]]),)),))))))))
 (19.06243239202172, :multipliers => (1 => :neuron), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.InputTimesState([Float64[], [1.7764644150882078, 0.8273121950886272]])))
 (19.06243239202172, :multipliers => 1, SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.InputTimesState([Float64[], [1.7764644150882078, 0.8273121950886272]]),))))
 (19.06243239202172, :multipliers => (2 => :neuron), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.InputTimesState([Float64[], [1.983288748450381, 1.0823969542409082, 0.51343574639084]])))
 (19.06243239202172, :multipliers => 2, SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.InputTimesState([Float64[], [1.983288748450381, 1.0823969542409082, 0.51343574639084]]),))))
 (19.06243239202172, :multipliers, SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.InputTimesState([Float64[], [1.7764644150882078, 0.8273121950886272]]),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.InputTimesState([Float64[], [1.983288748450381, 1.0823969542409082, 0.51343574639084]]),))))))
 (19.06243239202172, nothing, SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((##y2#278 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.9957322735539904), SpikingCircuits.PotentialState(-0.7985076962177722))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)), vec1 = SpikingCircuits.SpikingSimulator.CompositeState(()), ##y1#274 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.9957322735539904), SpikingCircuits.PotentialState(-0.7985076962177722))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)), vec2 = SpikingCircuits.SpikingSimulator.CompositeState(()), ##sumvec#284 = SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((##return#268 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970227),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-34.538776394910684),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf), SpikingCircuits.PotentialState(-0.6931471805599454))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)),)),)), SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((##return#268 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970227),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-34.538776394910684),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf), SpikingCircuits.PotentialState(-0.6931471805599454))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)),)),)))),)), ##output#289 = SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((##x#258 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.302585092994046), SpikingCircuits.PotentialState(-0.9162907318741542))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)),)),)), SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((##x#258 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.302585092994046), SpikingCircuits.PotentialState(-0.9162907318741542))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)),)),)))), multipliers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.InputTimesState([Float64[], [4.105912523578731, 0.6176838052402747]]),)),)))))), multipliers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.InputTimesState([Float64[], [1.7764644150882078, 0.8273121950886272]]),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.InputTimesState([Float64[], [1.983288748450381, 1.0823969542409082, 0.51343574639084]]),))))))))

julia> 

julia> dict = spiketrain_dict(filter(((t,args...),) -> is_primary_output(args...), events))

Dict{Any, Any} with 6 entries:
  :trace=>(:output=>(2=>(:x=>2))) => [7.25948]
  :value=>(2=>2)                  => [7.25948]
  :trace=>(:y1=>2)                => [5.91917]
  :trace=>(:output=>(1=>(:x=>1))) => [10.534]
  :trace=>(:y2=>2)                => [1.70572]
  :value=>(1=>1)                  => [10.534]

julia> for name in keys_deep(outputs(implemented))
           if !haskey(dict, name)
               dict[name] = []
           end
       end

julia> draw_spiketrain_figure(
           collect(values(dict)); names=map(x->"$x", collect(keys(dict))), xmin=0, xmax=100.
       )

julia> @time events = SpikingSimulator.simulate_for_time_and_get_events(implemented, 200.0;
           initial_inputs=(:inputs => :input => 2,),
       )
 12.108848 seconds (35.86 M allocations: 3.469 GiB, 9.45% gc time, 4.93% compilation time)
43707-element Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}:
 (0.0, :sub_gen_fns => (Symbol("##y2#278") => (:cpt_sample_score => (:assmts => (2 => :neuron)))), SpikingCircuits.SpikingSimulator.InputSpike(1))
 (0.0, :sub_gen_fns => (Symbol("##y2#278") => (:cpt_sample_score => (:assmts => (2 => :neuron)))), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.PotentialState(11.512925464970229)))
 (0.0, :sub_gen_fns => (Symbol("##y2#278") => (:cpt_sample_score => (:assmts => 2))), SpikingCircuits.SpikingSimulator.InputSpike(:in))
 (0.0, :sub_gen_fns => (Symbol("##y2#278") => (:cpt_sample_score => :assmts)), SpikingCircuits.SpikingSimulator.InputSpike(1 => 2))
 (0.0, :sub_gen_fns => (Symbol("##y2#278") => :cpt_sample_score), SpikingCircuits.SpikingSimulator.InputSpike(:in_vals => (1 => 2)))
 (0.0, :sub_gen_fns => Symbol("##y2#278"), SpikingCircuits.SpikingSimulator.InputSpike(:inputs => (1 => 2)))
 (0.0, :sub_gen_fns, SpikingCircuits.SpikingSimulator.InputSpike(Symbol("##y2#278") => (:inputs => (1 => 2))))
 (0.0, :sub_gen_fns => (Symbol("##y1#274") => (:cpt_sample_score => (:assmts => (2 => :neuron)))), SpikingCircuits.SpikingSimulator.InputSpike(1))
 (0.0, :sub_gen_fns => (Symbol("##y1#274") => (:cpt_sample_score => (:assmts => (2 => :neuron)))), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.PotentialState(11.512925464970229)))
 (0.0, :sub_gen_fns => (Symbol("##y1#274") => (:cpt_sample_score => (:assmts => 2))), SpikingCircuits.SpikingSimulator.InputSpike(:in))
 (0.0, :sub_gen_fns => (Symbol("##y1#274") => (:cpt_sample_score => :assmts)), SpikingCircuits.SpikingSimulator.InputSpike(1 => 2))
 (0.0, :sub_gen_fns => (Symbol("##y1#274") => :cpt_sample_score), SpikingCircuits.SpikingSimulator.InputSpike(:in_vals => (1 => 2)))
 (0.0, :sub_gen_fns => Symbol("##y1#274"), SpikingCircuits.SpikingSimulator.InputSpike(:inputs => (1 => 2)))
 (0.0, :sub_gen_fns, SpikingCircuits.SpikingSimulator.InputSpike(Symbol("##y1#274") => (:inputs => (1 => 2))))
 (0.0, nothing, SpikingCircuits.SpikingSimulator.InputSpike(:inputs => (:input => 2)))
 (0.0, nothing, SpikingCircuits.SpikingSimulator.InputSpike(:inputs => (:input => 2)))
 (1.6311673161942505e-7, :sub_gen_fns => (Symbol("##y2#278") => (:cpt_sample_score => (:assmts => (2 => :neuron)))), SpikingCircuits.SpikingSimulator.OutputSpike(:out))
 (1.6311673161942505e-7, :sub_gen_fns => (Symbol("##y2#278") => (:cpt_sample_score => (:assmts => (2 => :neuron)))), SpikingCircuits.SpikingSimulator.InputSpike(2))
 (1.6311673161942505e-7, :sub_gen_fns => (Symbol("##y2#278") => (:cpt_sample_score => (:assmts => (2 => :neuron)))), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.PotentialState(-11.512925464970229)))
 (1.6311673161942505e-7, :sub_gen_fns => (Symbol("##y2#278") => (:cpt_sample_score => (:assmts => 2))), SpikingCircuits.SpikingSimulator.OutputSpike(:out))
 (1.6311673161942505e-7, :sub_gen_fns => (Symbol("##y2#278") => (:cpt_sample_score => (:assmts => 2))), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),))))
 (1.6311673161942505e-7, :sub_gen_fns => (Symbol("##y2#278") => (:cpt_sample_score => :assmts)), SpikingCircuits.SpikingSimulator.OutputSpike(:out => 2))
 (1.6311673161942505e-7, :sub_gen_fns => (Symbol("##y2#278") => (:cpt_sample_score => :assmts)), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),))))))
 (1.6311673161942505e-7, :sub_gen_fns => (Symbol("##y2#278") => (:cpt_sample_score => (:sample_score => (:spikers => 1)))), SpikingCircuits.SpikingSimulator.InputSpike(2))
 â‹®
 (199.94640549558758, :sub_gen_fns => (Symbol("##y1#274") => (:cpt_sample_score => (:sample_score => :mux))), SpikingCircuits.SpikingSimulator.OutputSpike(:val))
 (199.94640549558758, :sub_gen_fns => (Symbol("##y1#274") => (:cpt_sample_score => (:sample_score => :mux))), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),))))))
 (199.94640549558758, :sub_gen_fns => (Symbol("##y1#274") => (:cpt_sample_score => :sample_score)), SpikingCircuits.SpikingSimulator.OutputSpike(:prob))
 (199.94640549558758, :sub_gen_fns => (Symbol("##y1#274") => (:cpt_sample_score => :sample_score)), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.9957322735539904), SpikingCircuits.PotentialState(-0.7985076962177722))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),))))))))
 (199.94640549558758, :sub_gen_fns => (Symbol("##y1#274") => :cpt_sample_score), SpikingCircuits.SpikingSimulator.OutputSpike(:prob))
 (199.94640549558758, :sub_gen_fns => (Symbol("##y1#274") => :cpt_sample_score), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.9957322735539904), SpikingCircuits.PotentialState(-0.7985076962177722))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),))))))))))
 (199.94640549558758, :sub_gen_fns => Symbol("##y1#274"), SpikingCircuits.SpikingSimulator.OutputSpike(:prob))
 (199.94640549558758, :sub_gen_fns => Symbol("##y1#274"), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.9957322735539904), SpikingCircuits.PotentialState(-0.7985076962177722))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),))))
 (199.94640549558758, :sub_gen_fns => (Symbol("##output#289") => (:multipliers => (1 => :neuron))), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.InputTimesState([[5.167407294568889, 3.59247893677397, 2.5989594465427284, 0.5646388128915211], [4.812730324251799, 4.212072374442894, 0.4756507983323917]])))
 (199.94640549558758, :sub_gen_fns => (Symbol("##output#289") => (:multipliers => 1)), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.InputTimesState([[5.167407294568889, 3.59247893677397, 2.5989594465427284, 0.5646388128915211], [4.812730324251799, 4.212072374442894, 0.4756507983323917]]),))))
 (199.94640549558758, :sub_gen_fns => (Symbol("##output#289") => :multipliers), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.InputTimesState([[5.167407294568889, 3.59247893677397, 2.5989594465427284, 0.5646388128915211], [4.812730324251799, 4.212072374442894, 0.4756507983323917]]),)),))))
 (199.94640549558758, :sub_gen_fns => Symbol("##output#289"), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((##x#258 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.302585092994046), SpikingCircuits.PotentialState(-0.9162907318741542))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)),)),)), SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((##x#258 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.302585092994046), SpikingCircuits.PotentialState(-0.9162907318741542))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)),)),)))), multipliers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.InputTimesState([[5.167407294568889, 3.59247893677397, 2.5989594465427284, 0.5646388128915211], [4.812730324251799, 4.212072374442894, 0.4756507983323917]]),)),))))))
 (199.94640549558758, :sub_gen_fns, SpikingCircuits.SpikingSimulator.OutputSpike(Symbol("##y1#274") => :prob))
 (199.94640549558758, :sub_gen_fns, SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((##y2#278 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.9957322735539904), SpikingCircuits.PotentialState(-0.7985076962177722))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)), vec1 = SpikingCircuits.SpikingSimulator.CompositeState(()), ##y1#274 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.9957322735539904), SpikingCircuits.PotentialState(-0.7985076962177722))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)), vec2 = SpikingCircuits.SpikingSimulator.CompositeState(()), ##sumvec#284 = SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((##return#268 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970227),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-34.538776394910684),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf), SpikingCircuits.PotentialState(-0.6931471805599454))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)),)),)), SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((##return#268 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970227),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-34.538776394910684),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf), SpikingCircuits.PotentialState(-0.6931471805599454))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)),)),)))),)), ##output#289 = SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((##x#258 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.302585092994046), SpikingCircuits.PotentialState(-0.9162907318741542))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)),)),)), SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((##x#258 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.302585092994046), SpikingCircuits.PotentialState(-0.9162907318741542))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)),)),)))), multipliers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.InputTimesState([[5.167407294568889, 3.59247893677397, 2.5989594465427284, 0.5646388128915211], [4.812730324251799, 4.212072374442894, 0.4756507983323917]]),)),))))))))
 (199.94640549558758, :multipliers => (1 => :neuron), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.InputTimesState([Float64[], [5.048392990707214, 2.695752500093454]])))
 (199.94640549558758, :multipliers => 1, SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.InputTimesState([Float64[], [5.048392990707214, 2.695752500093454]]),))))
 (199.94640549558758, :multipliers => (2 => :neuron), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.InputTimesState([Float64[], [5.45895462798378, 0.5047874593684029]])))
 (199.94640549558758, :multipliers => 2, SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.InputTimesState([Float64[], [5.45895462798378, 0.5047874593684029]]),))))
 (199.94640549558758, :multipliers, SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.InputTimesState([Float64[], [5.048392990707214, 2.695752500093454]]),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.InputTimesState([Float64[], [5.45895462798378, 0.5047874593684029]]),))))))
 (199.94640549558758, :multipliers => (1 => :neuron), SpikingCircuits.SpikingSimulator.InputSpike(2))
 (199.94640549558758, :multipliers => (1 => :neuron), SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.InputTimesState([Float64[], [5.048392990707214, 2.695752500093454, 0.0]])))
 (199.94640549558758, :multipliers => 1, SpikingCircuits.SpikingSimulator.InputSpike(2))
 (199.94640549558758, :multipliers, SpikingCircuits.SpikingSimulator.InputSpike(1 => 2))
 (199.94640549558758, nothing, SpikingCircuits.SpikingSimulator.StateChange(SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((##y2#278 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.9957322735539904), SpikingCircuits.PotentialState(-0.7985076962177722))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)), vec1 = SpikingCircuits.SpikingSimulator.CompositeState(()), ##y1#274 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.9957322735539904), SpikingCircuits.PotentialState(-0.7985076962177722))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)), vec2 = SpikingCircuits.SpikingSimulator.CompositeState(()), ##sumvec#284 = SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((##return#268 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970227),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-34.538776394910684),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf), SpikingCircuits.PotentialState(-0.6931471805599454))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)),)),)), SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((##return#268 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970227),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-34.538776394910684),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf), SpikingCircuits.PotentialState(-0.6931471805599454))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)),)),)))),)), ##output#289 = SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((##x#258 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.302585092994046), SpikingCircuits.PotentialState(-0.9162907318741542))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)),)),)), SpikingCircuits.SpikingSimulator.CompositeState((sub_gen_fns = SpikingCircuits.SpikingSimulator.CompositeState((##x#258 = SpikingCircuits.SpikingSimulator.CompositeState((cpt_sample_score = SpikingCircuits.SpikingSimulator.CompositeState((assmts = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.PotentialState(-11.512925464970229),)))), sample_score = SpikingCircuits.SpikingSimulator.CompositeState((spikers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-2.302585092994046), SpikingCircuits.PotentialState(-0.9162907318741542))), mux = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(0.0),)), outputter = SpikingCircuits.PotentialState(0.0))),)), SpikingCircuits.SpikingSimulator.CompositeState((val = SpikingCircuits.SpikingSimulator.CompositeState((inhibitor = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), outputter = SpikingCircuits.PotentialState(0.0))),)))), cvb = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)), SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.PotentialState(-Inf),)))))))),)),)),)))), multipliers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.InputTimesState([[5.167407294568889, 3.59247893677397, 2.5989594465427284, 0.5646388128915211], [4.812730324251799, 4.212072374442894, 0.4756507983323917]]),)),)))))), multipliers = SpikingCircuits.SpikingSimulator.CompositeState((SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.InputTimesState([Float64[], [5.048392990707214, 2.695752500093454, 0.0]]),)), SpikingCircuits.SpikingSimulator.CompositeState((neuron = SpikingCircuits.InputTimesState([Float64[], [5.45895462798378, 0.5047874593684029]]),))))))))

julia> dict = spiketrain_dict(filter(((t,args...),) -> is_primary_output(args...), events))
Dict{Any, Any} with 7 entries:
  :trace=>(:output=>(1=>(:x=>2))) => [2.62726]
  :trace=>(:output=>(2=>(:x=>2))) => [4.45079]
  :value=>(2=>2)                  => [4.45079]
  :value=>(1=>2)                  => [2.62726]
  :trace=>(:y1=>2)                => [1.29261]
  :prob                           => [14.5331, 20.8688, 25.7813, 27.2957, 27.784, 28.3391, 28.6965, 28.8755â€¦
  :trace=>(:y2=>2)                => [0.424939]

julia> for name in keys_deep(outputs(implemented))
           if !haskey(dict, name)
               dict[name] = []
           end
       end

julia> draw_spiketrain_figure(
           collect(values(dict)); names=map(x->"$x", collect(keys(dict))), xmin=0, xmax=100.
       )

julia> draw_spiketrain_figure(
           collect(values(dict)); names=map(x->"$x", collect(keys(dict))), xmin=0, xmax=100.
       )

julia> length([x for x in dict[:prob] if x > 25])
44

julia> 44/75
0.5866666666666667

julia> probrate(dict, run_time) =
           if haskey(dict, :prob)
               length([x for x in dict[:prob] if x > 3/4 * run_time]) / (3/4 * run_time)
           else
               0.
           end
probrate (generic function with 1 method)

julia> function do_run_and_check_spike_rate(run_length=100.0, input_val=2)
           events = SpikingSimulator.simulate_for_time_and_get_events(implemented, run_length;
               initial_inputs=(:inputs => :input => input_val,),
           )
           dict = spiketrain_dict(filter(((t,args...),) -> is_primary_output(args...), events))

           y1 = haskey(dict, :trace => y1 => 1) ? 1 : 2
           y2 = haskey(dict, :trace => y2 => 1) ? 1 : 2
           x1 = haskey(dict, :trace => :output => 1 => :x => 1) ? 1 : 2
           x2 = haskey(dict, :trace => :output => 2 => :x => 1) ? 1 : 2

           true_prob = exp(assess(outside, (input_val,), choicemap(
               (:y1, y1), (:y2, y2),
               (:output => 1 => :x, x1),
               (:output => 1 => :x, x2),
           )))

           expected_rate = true_prob * REF_RATE()
           actual_rate   = probrate(dict, run_length)
       end
do_run_and_check_spike_rate (generic function with 3 methods)

julia> function do_run_and_check_spike_rate(run_length=100.0, input_val=2)
           events = SpikingSimulator.simulate_for_time_and_get_events(implemented, run_length;
               initial_inputs=(:inputs => :input => input_val,),
           )
           dict = spiketrain_dict(filter(((t,args...),) -> is_primary_output(args...), events))

           y1 = haskey(dict, :trace => y1 => 1) ? 1 : 2
           y2 = haskey(dict, :trace => y2 => 1) ? 1 : 2
           x1 = haskey(dict, :trace => :output => 1 => :x => 1) ? 1 : 2
           x2 = haskey(dict, :trace => :output => 2 => :x => 1) ? 1 : 2

           true_prob = exp(assess(outside, (input_val,), choicemap(
               (:y1, y1), (:y2, y2),
               (:output => 1 => :x, x1),
               (:output => 1 => :x, x2),
           )))

           expected_rate = true_prob * REF_RATE()
           actual_rate   = probrate(dict, run_length)

           return (expected_rate, actual_rate)
       end
do_run_and_check_spike_rate (generic function with 3 methods)

julia> do_run_and_check_spike_rate()
ERROR: UndefVarError: y1 not defined
Stacktrace:
 [1] do_run_and_check_spike_rate(run_length::Float64, input_val::Int64)
   @ Main ./REPL[15]:7
 [2] do_run_and_check_spike_rate()
   @ Main ./REPL[15]:2
 [3] top-level scope
   @ REPL[16]:1

julia> function do_run_and_check_spike_rate(run_length=100.0, input_val=2)
           events = SpikingSimulator.simulate_for_time_and_get_events(implemented, run_length;
               initial_inputs=(:inputs => :input => input_val,),
           )
           dict = spiketrain_dict(filter(((t,args...),) -> is_primary_output(args...), events))

           y1 = haskey(dict, :trace => :y1 => 1) ? 1 : 2
           y2 = haskey(dict, :trace => :y2 => 1) ? 1 : 2
           x1 = haskey(dict, :trace => :output => 1 => :x => 1) ? 1 : 2
           x2 = haskey(dict, :trace => :output => 2 => :x => 1) ? 1 : 2

           true_prob = exp(assess(outside, (input_val,), choicemap(
               (:y1, y1), (:y2, y2),
               (:output => 1 => :x, x1),
               (:output => 1 => :x, x2),
           )))

           expected_rate = true_prob * REF_RATE()
           actual_rate   = probrate(dict, run_length)

           return (expected_rate, actual_rate)
       end
do_run_and_check_spike_rate (generic function with 3 methods)

julia> function do_run_and_check_spike_rate(run_length=100.0, input_val=2)
           events = SpikingSimulator.simulate_for_time_and_get_events(implemented, run_length;
               initial_inputs=(:inputs => :input => input_val,),
           )
           dict = spiketrain_dict(filter(((t,args...),) -> is_primary_output(args...), events))

           y1 = haskey(dict, :trace => :y1 => 1) ? 1 : 2
           y2 = haskey(dict, :trace => :y2 => 1) ? 1 : 2
           x1 = haskey(dict, :trace => :output => 1 => :x => 1) ? 1 : 2
           x2 = haskey(dict, :trace => :output => 2 => :x => 1) ? 1 : 2

           true_prob = exp(assess(outside, (input_val,), choicemap(
               (:y1, y1), (:y2, y2),
               (:output => 1 => :x, x1),
               (:output => 1 => :x, x2),
           )))

           expected_rate = true_prob * REF_RATE()
           actual_rate   = probrate(dict, run_length)

           return (expected_rate, actual_rate)
       end
do_run_and_check_spike_rate (generic function with 3 methods)

julia> do_run_and_check_spike_rate()


^CERROR: InterruptException:
Stacktrace:
  [1] merge(a::NamedTuple{(), Tuple{}}, itr::OrderedCollections.OrderedDict{Symbol, SpikingCircuits.SpikingSimulator.State})
    @ Base ./namedtuple.jl:291
  [2] immutable_version(d::OrderedCollections.OrderedDict{Symbol, SpikingCircuits.SpikingSimulator.State})
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:399
  [3] advance_time_by(c::CompositeComponent, s::SpikingCircuits.SpikingSimulator.CompositeState, t::SpikingCircuits.SpikingSimulator.CompositeTrajectory, Î”T::Float64, f::SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol}, Int64}, Symbol}, Symbol}, Symbol}, Symbol}, Int64})
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:520
  [4] (::SpikingCircuits.SpikingSimulator.var"#40#47"{Float64, SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol}, Int64}, Symbol}, Symbol}, Symbol}, Symbol}})(name::Int64, sc::CompositeComponent, ss::SpikingCircuits.SpikingSimulator.CompositeState, st::SpikingCircuits.SpikingSimulator.CompositeTrajectory)
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:506
  [5] map(::Function, ::Tuple{Int64, Int64}, ::Tuple{CompositeComponent, CompositeComponent}, ::Tuple{SpikingCircuits.SpikingSimulator.CompositeState, SpikingCircuits.SpikingSimulator.CompositeState}, ::Vararg{Tuple, N} where N)
    @ Base ./tuple.jl:252
  [6] advance_time_by(c::CompositeComponent, s::SpikingCircuits.SpikingSimulator.CompositeState, t::SpikingCircuits.SpikingSimulator.CompositeTrajectory, Î”T::Float64, f::SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol}, Int64}, Symbol}, Symbol}, Symbol}, Symbol})
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:505
  [7] (::SpikingCircuits.SpikingSimulator.var"#40#47"{Float64, SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol}, Int64}, Symbol}, Symbol}, Symbol}})(name::Symbol, sc::CompositeComponent, ss::SpikingCircuits.SpikingSimulator.CompositeState, st::SpikingCircuits.SpikingSimulator.CompositeTrajectory)
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:506
  [8] map(::Function, ::Tuple{Symbol, Symbol}, ::Tuple{CompositeComponent, CompositeComponent}, ::Tuple{SpikingCircuits.SpikingSimulator.CompositeState, SpikingCircuits.SpikingSimulator.CompositeState}, ::Vararg{Tuple, N} where N)
    @ Base ./tuple.jl:252
  [9] map(::Function, ::NamedTuple{(:assmts, :sample_score), Tuple{Symbol, Symbol}}, ::NamedTuple{(:assmts, :sample_score), Tuple{CompositeComponent, CompositeComponent}}, ::NamedTuple{(:assmts, :sample_score), Tuple{SpikingCircuits.SpikingSimulator.CompositeState, SpikingCircuits.SpikingSimulator.CompositeState}}, ::Vararg{NamedTuple, N} where N)
    @ Base ./namedtuple.jl:197
 [10] advance_time_by(c::CompositeComponent, s::SpikingCircuits.SpikingSimulator.CompositeState, t::SpikingCircuits.SpikingSimulator.CompositeTrajectory, Î”T::Float64, f::SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol}, Int64}, Symbol}, Symbol}, Symbol})
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:505
 [11] (::SpikingCircuits.SpikingSimulator.var"#40#47"{Float64, SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol}, Int64}, Symbol}, Symbol}})(name::Symbol, sc::CompositeComponent, ss::SpikingCircuits.SpikingSimulator.CompositeState, st::SpikingCircuits.SpikingSimulator.CompositeTrajectory)
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:506
 [12] map(::Function, ::Tuple{Symbol}, ::Tuple{CompositeComponent}, ::Tuple{SpikingCircuits.SpikingSimulator.CompositeState}, ::Vararg{Tuple, N} where N)
    @ Base ./tuple.jl:252
 [13] map(::Function, ::NamedTuple{(:cpt_sample_score,), Tuple{Symbol}}, ::NamedTuple{(:cpt_sample_score,), Tuple{CompositeComponent}}, ::NamedTuple{(:cpt_sample_score,), Tuple{SpikingCircuits.SpikingSimulator.CompositeState}}, ::Vararg{NamedTuple, N} where N)
    @ Base ./namedtuple.jl:197
 [14] advance_time_by(c::CompositeComponent, s::SpikingCircuits.SpikingSimulator.CompositeState, t::SpikingCircuits.SpikingSimulator.CompositeTrajectory, Î”T::Float64, f::SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol}, Int64}, Symbol}, Symbol})
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:505
 [15] (::SpikingCircuits.SpikingSimulator.var"#40#47"{Float64, SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol}, Int64}, Symbol}})(name::Symbol, sc::CompositeComponent, ss::SpikingCircuits.SpikingSimulator.CompositeState, st::SpikingCircuits.SpikingSimulator.CompositeTrajectory)
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:506
 [16] map(::Function, ::Tuple{Symbol}, ::Tuple{CompositeComponent}, ::Tuple{SpikingCircuits.SpikingSimulator.CompositeState}, ::Vararg{Tuple, N} where N)
    @ Base ./tuple.jl:252
 [17] map(::Function, ::NamedTuple{(Symbol("##x#258"),), Tuple{Symbol}}, ::NamedTuple{(Symbol("##x#258"),), Tuple{CompositeComponent}}, ::NamedTuple{(Symbol("##x#258"),), Tuple{SpikingCircuits.SpikingSimulator.CompositeState}}, ::Vararg{NamedTuple, N} where N)
    @ Base ./namedtuple.jl:197
 [18] advance_time_by(c::CompositeComponent, s::SpikingCircuits.SpikingSimulator.CompositeState, t::SpikingCircuits.SpikingSimulator.CompositeTrajectory, Î”T::Float64, f::SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol}, Int64}, Symbol})
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:505
 [19] (::SpikingCircuits.SpikingSimulator.var"#40#47"{Float64, SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol}, Int64}})(name::Symbol, sc::CompositeComponent, ss::SpikingCircuits.SpikingSimulator.CompositeState, st::SpikingCircuits.SpikingSimulator.CompositeTrajectory)
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:506
 [20] map(::Function, ::Tuple{Symbol}, ::Tuple{CompositeComponent}, ::Tuple{SpikingCircuits.SpikingSimulator.CompositeState}, ::Vararg{Tuple, N} where N)
    @ Base ./tuple.jl:252
 [21] map(::Function, ::NamedTuple{(:sub_gen_fns,), Tuple{Symbol}}, ::NamedTuple{(:sub_gen_fns,), Tuple{CompositeComponent}}, ::NamedTuple{(:sub_gen_fns,), Tuple{SpikingCircuits.SpikingSimulator.CompositeState}}, ::Vararg{NamedTuple, N} where N)
    @ Base ./namedtuple.jl:197
 [22] advance_time_by(c::CompositeComponent, s::SpikingCircuits.SpikingSimulator.CompositeState, t::SpikingCircuits.SpikingSimulator.CompositeTrajectory, Î”T::Float64, f::SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol}, Int64})
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:505
 [23] (::SpikingCircuits.SpikingSimulator.var"#40#47"{Float64, SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol}})(name::Int64, sc::CompositeComponent, ss::SpikingCircuits.SpikingSimulator.CompositeState, st::SpikingCircuits.SpikingSimulator.CompositeTrajectory)
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:506
 [24] map(::Function, ::Tuple{Int64}, ::Tuple{CompositeComponent}, ::Tuple{SpikingCircuits.SpikingSimulator.CompositeState}, ::Vararg{Tuple, N} where N)
    @ Base ./tuple.jl:252
 [25] advance_time_by(c::CompositeComponent, s::SpikingCircuits.SpikingSimulator.CompositeState, t::SpikingCircuits.SpikingSimulator.CompositeTrajectory, Î”T::Float64, f::SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol})
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:505
 [26] (::SpikingCircuits.SpikingSimulator.var"#40#47"{Float64, SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}})(name::Symbol, sc::CompositeComponent, ss::SpikingCircuits.SpikingSimulator.CompositeState, st::SpikingCircuits.SpikingSimulator.CompositeTrajectory)
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:506
 [27] map(::Function, ::Tuple{Symbol, Symbol}, ::Tuple{CompositeComponent, CompositeComponent}, ::Tuple{SpikingCircuits.SpikingSimulator.CompositeState, SpikingCircuits.SpikingSimulator.CompositeState}, ::Vararg{Tuple, N} where N)
    @ Base ./tuple.jl:252
 [28] map(::Function, ::NamedTuple{(:sub_gen_fns, :multipliers), Tuple{Symbol, Symbol}}, ::NamedTuple{(:sub_gen_fns, :multipliers), Tuple{CompositeComponent, CompositeComponent}}, ::NamedTuple{(:sub_gen_fns, :multipliers), Tuple{SpikingCircuits.SpikingSimulator.CompositeState, SpikingCircuits.SpikingSimulator.CompositeState}}, ::Vararg{NamedTuple, N} where N)
    @ Base ./namedtuple.jl:197
 [29] advance_time_by(c::CompositeComponent, s::SpikingCircuits.SpikingSimulator.CompositeState, t::SpikingCircuits.SpikingSimulator.CompositeTrajectory, Î”T::Float64, f::SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol})
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:505
 [30] (::SpikingCircuits.SpikingSimulator.var"#40#47"{Float64, SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}})(name::Symbol, sc::CompositeComponent, ss::SpikingCircuits.SpikingSimulator.CompositeState, st::SpikingCircuits.SpikingSimulator.CompositeTrajectory)
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:506
 [31] map(::Function, ::Tuple{Symbol}, ::Tuple{CompositeComponent}, ::Tuple{SpikingCircuits.SpikingSimulator.CompositeState}, ::Vararg{Tuple, N} where N)
    @ Base ./tuple.jl:252
 [32] map(::Function, ::NamedTuple{(Symbol("##y2#278"), :vec1, Symbol("##y1#274"), :vec2, Symbol("##sumvec#284"), Symbol("##output#289")), NTuple{6, Symbol}}, ::NamedTuple{(Symbol("##y2#278"), :vec1, Symbol("##y1#274"), :vec2, Symbol("##sumvec#284"), Symbol("##output#289")), NTuple{6, CompositeComponent}}, ::NamedTuple{(Symbol("##y2#278"), :vec1, Symbol("##y1#274"), :vec2, Symbol("##sumvec#284"), Symbol("##output#289")), NTuple{6, SpikingCircuits.SpikingSimulator.CompositeState}}, ::Vararg{NamedTuple, N} where N)
    @ Base ./namedtuple.jl:197
 [33] advance_time_by(c::CompositeComponent, s::SpikingCircuits.SpikingSimulator.CompositeState, t::SpikingCircuits.SpikingSimulator.CompositeTrajectory, Î”T::Float64, f::SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol})
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:505
 [34] (::SpikingCircuits.SpikingSimulator.var"#40#47"{Float64, SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}})(name::Symbol, sc::CompositeComponent, ss::SpikingCircuits.SpikingSimulator.CompositeState, st::SpikingCircuits.SpikingSimulator.CompositeTrajectory)
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:506
 [35] map(::Function, ::Tuple{Symbol, Symbol}, ::Tuple{CompositeComponent, CompositeComponent}, ::Tuple{SpikingCircuits.SpikingSimulator.CompositeState, SpikingCircuits.SpikingSimulator.CompositeState}, ::Vararg{Tuple, N} where N)
    @ Base ./tuple.jl:252
 [36] map(::Function, ::NamedTuple{(:sub_gen_fns, :multipliers), Tuple{Symbol, Symbol}}, ::NamedTuple{(:sub_gen_fns, :multipliers), Tuple{CompositeComponent, CompositeComponent}}, ::NamedTuple{(:sub_gen_fns, :multipliers), Tuple{SpikingCircuits.SpikingSimulator.CompositeState, SpikingCircuits.SpikingSimulator.CompositeState}}, ::Vararg{NamedTuple, N} where N)
    @ Base ./namedtuple.jl:197
 [37] advance_time_by(c::CompositeComponent, s::SpikingCircuits.SpikingSimulator.CompositeState, t::SpikingCircuits.SpikingSimulator.CompositeTrajectory, Î”T::Float64, f::SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}})
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:505
 [38] simulate_for_time(callback::SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, c::CompositeComponent, Î”T::Float64, s::SpikingCircuits.SpikingSimulator.CompositeState, t::SpikingCircuits.SpikingSimulator.CompositeTrajectory; initial_inputs::Tuple{Pair{Symbol, Pair{Symbol, Int64}}}, event_filter::Function)
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:351
 [39] simulate_for_time_and_get_events(::CompositeComponent, ::Vararg{Any, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Tuple{Pair{Symbol, Pair{Symbol, Int64}}}, Tuple{Symbol}, NamedTuple{(:initial_inputs,), Tuple{Tuple{Pair{Symbol, Pair{Symbol, Int64}}}}}})
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:379
 [40] do_run_and_check_spike_rate(run_length::Float64, input_val::Int64)
    @ Main ./REPL[17]:2
 [41] top-level scope
    @ REPL[18]:1

julia> do_run_and_check_spike_rate()
ERROR: Not implemented
Stacktrace:
 [1] error(s::String)
   @ Base ./error.jl:33
 [2] generate(#unused#::var"##StaticGenFunction_outside#296", #unused#::Tuple{Int64}, #unused#::DynamicChoiceMap)
   @ Gen ~/.julia/packages/Gen/eurZv/src/gen_fn_interface.jl:186
 [3] assess(gen_fn::var"##StaticGenFunction_outside#296", args::Tuple{Int64}, choices::DynamicChoiceMap)
   @ Gen ~/.julia/packages/Gen/eurZv/src/gen_fn_interface.jl:242
 [4] do_run_and_check_spike_rate(run_length::Float64, input_val::Int64)
   @ Main ./REPL[17]:12
 [5] do_run_and_check_spike_rate()
   @ Main ./REPL[17]:2
 [6] top-level scope
   @ REPL[18]:1

julia> @load_generated_functions()

julia> do_run_and_check_spike_rate()
ERROR: MethodError: no method matching exp(::Tuple{Float64, FunctionalCollections.PersistentVector{Int64}})
Closest candidates are:
  exp(::StridedMatrix{var"#s829"} where var"#s829"<:Union{Float32, Float64, ComplexF32, ComplexF64}) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/dense.jl:554
  exp(::StridedMatrix{var"#s829"} where var"#s829"<:Union{Integer, Complex{var"#s828"} where var"#s828"<:Integer}) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/dense.jl:555
  exp(::ColorTypes.AbstractGray{T} where T) at /Users/georgematheos/.julia/packages/ColorVectorSpace/WvKgt/src/ColorVectorSpace.jl:215
  ...
Stacktrace:
 [1] do_run_and_check_spike_rate(run_length::Float64, input_val::Int64)
   @ Main ./REPL[17]:12
 [2] do_run_and_check_spike_rate()
   @ Main ./REPL[17]:2
 [3] top-level scope
   @ REPL[20]:1

help?> Gen.assess
  (weight, retval) = assess(gen_fn::GenerativeFunction, args::Tuple, choices::ChoiceMap)

  Return the probability of proposing an assignment

  Given arguments x (args) and an assignment t (choices) such that p(t; x) > 0, sample r \sim q(\cdot; x,
  t) and return the weight (weight):

  \log \frac{p(r, t; x)}{q(r; x, t)}

  It is an error if p(t; x) = 0.

julia> function do_run_and_check_spike_rate(run_length=100.0, input_val=2)
           events = SpikingSimulator.simulate_for_time_and_get_events(implemented, run_length;
               initial_inputs=(:inputs => :input => input_val,),
           )
           dict = spiketrain_dict(filter(((t,args...),) -> is_primary_output(args...), events))

           y1 = haskey(dict, :trace => :y1 => 1) ? 1 : 2
           y2 = haskey(dict, :trace => :y2 => 1) ? 1 : 2
           x1 = haskey(dict, :trace => :output => 1 => :x => 1) ? 1 : 2
           x2 = haskey(dict, :trace => :output => 2 => :x => 1) ? 1 : 2

           true_prob = exp(assess(outside, (input_val,), choicemap(
               (:y1, y1), (:y2, y2),
               (:output => 1 => :x, x1),
               (:output => 1 => :x, x2),
           ))[1])

           expected_rate = true_prob * REF_RATE()
           actual_rate   = probrate(dict, run_length)

           return (expected_rate, actual_rate)
       end
do_run_and_check_spike_rate (generic function with 3 methods)

help?> Gen.assess
  (weight, retval) = assess(gen_fn::GenerativeFunction, args::Tuple, choices::ChoiceMap)

  Return the probability of proposing an assignment

  Given arguments x (args) and an assignment t (choices) such that p(t; x) > 0, sample r \sim q(\cdot; x,
  t) and return the weight (weight):

  \log \frac{p(r, t; x)}{q(r; x, t)}

  It is an error if p(t; x) = 0.

julia> do_run_and_check_spike_rate()
(0.324, 0.05333333333333334)

julia> do_run_and_check_spike_rate()
(0.009000000000000001, 0.013333333333333334)

julia> do_run_and_check_spike_rate()
(0.08100000000000002, 0.02666666666666667)

julia> [do_run_and_check_spike_rate() for _=1:20]



^CERROR: InterruptException:
Stacktrace:
  [1] merge(a::NamedTuple{(), Tuple{}}, itr::Base.Generator{Tuple{Symbol}, SpikingCircuits.SpikingSimulator.var"#38#39"})
    @ Base ./namedtuple.jl:291
  [2] names(n::NamedTuple{(:neuron,), Tuple{IntegratingPoisson}})
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:498
  [3] advance_time_by(c::CompositeComponent, s::SpikingCircuits.SpikingSimulator.CompositeState, t::SpikingCircuits.SpikingSimulator.CompositeTrajectory, Î”T::Float64, f::SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol}, Int64}, Symbol}, Symbol}, Symbol}, Symbol}, Int64})
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:505
  [4] (::SpikingCircuits.SpikingSimulator.var"#40#47"{Float64, SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol}, Int64}, Symbol}, Symbol}, Symbol}, Symbol}})(name::Int64, sc::CompositeComponent, ss::SpikingCircuits.SpikingSimulator.CompositeState, st::SpikingCircuits.SpikingSimulator.CompositeTrajectory)
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:506
  [5] map(::Function, ::Tuple{Int64}, ::Tuple{CompositeComponent}, ::Tuple{SpikingCircuits.SpikingSimulator.CompositeState}, ::Vararg{Tuple, N} where N)
    @ Base ./tuple.jl:252
  [6] advance_time_by(c::CompositeComponent, s::SpikingCircuits.SpikingSimulator.CompositeState, t::SpikingCircuits.SpikingSimulator.CompositeTrajectory, Î”T::Float64, f::SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol}, Int64}, Symbol}, Symbol}, Symbol}, Symbol})
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:505
  [7] (::SpikingCircuits.SpikingSimulator.var"#40#47"{Float64, SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol}, Int64}, Symbol}, Symbol}, Symbol}})(name::Symbol, sc::CompositeComponent, ss::SpikingCircuits.SpikingSimulator.CompositeState, st::SpikingCircuits.SpikingSimulator.CompositeTrajectory)
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:506
  [8] map(::Function, ::Tuple{Symbol, Symbol}, ::Tuple{CompositeComponent, CompositeComponent}, ::Tuple{SpikingCircuits.SpikingSimulator.CompositeState, SpikingCircuits.SpikingSimulator.CompositeState}, ::Vararg{Tuple, N} where N)
    @ Base ./tuple.jl:252
  [9] map(::Function, ::NamedTuple{(:assmts, :sample_score), Tuple{Symbol, Symbol}}, ::NamedTuple{(:assmts, :sample_score), Tuple{CompositeComponent, CompositeComponent}}, ::NamedTuple{(:assmts, :sample_score), Tuple{SpikingCircuits.SpikingSimulator.CompositeState, SpikingCircuits.SpikingSimulator.CompositeState}}, ::Vararg{NamedTuple, N} where N)
    @ Base ./namedtuple.jl:197
 [10] advance_time_by(c::CompositeComponent, s::SpikingCircuits.SpikingSimulator.CompositeState, t::SpikingCircuits.SpikingSimulator.CompositeTrajectory, Î”T::Float64, f::SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol}, Int64}, Symbol}, Symbol}, Symbol})
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:505
 [11] (::SpikingCircuits.SpikingSimulator.var"#40#47"{Float64, SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol}, Int64}, Symbol}, Symbol}})(name::Symbol, sc::CompositeComponent, ss::SpikingCircuits.SpikingSimulator.CompositeState, st::SpikingCircuits.SpikingSimulator.CompositeTrajectory)
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:506
 [12] map(::Function, ::Tuple{Symbol}, ::Tuple{CompositeComponent}, ::Tuple{SpikingCircuits.SpikingSimulator.CompositeState}, ::Vararg{Tuple, N} where N)
    @ Base ./tuple.jl:252
 [13] map(::Function, ::NamedTuple{(:cpt_sample_score,), Tuple{Symbol}}, ::NamedTuple{(:cpt_sample_score,), Tuple{CompositeComponent}}, ::NamedTuple{(:cpt_sample_score,), Tuple{SpikingCircuits.SpikingSimulator.CompositeState}}, ::Vararg{NamedTuple, N} where N)
    @ Base ./namedtuple.jl:197
 [14] advance_time_by(c::CompositeComponent, s::SpikingCircuits.SpikingSimulator.CompositeState, t::SpikingCircuits.SpikingSimulator.CompositeTrajectory, Î”T::Float64, f::SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol}, Int64}, Symbol}, Symbol})
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:505
 [15] (::SpikingCircuits.SpikingSimulator.var"#40#47"{Float64, SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol}, Int64}, Symbol}})(name::Symbol, sc::CompositeComponent, ss::SpikingCircuits.SpikingSimulator.CompositeState, st::SpikingCircuits.SpikingSimulator.CompositeTrajectory)
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:506
 [16] map(::Function, ::Tuple{Symbol}, ::Tuple{CompositeComponent}, ::Tuple{SpikingCircuits.SpikingSimulator.CompositeState}, ::Vararg{Tuple, N} where N)
    @ Base ./tuple.jl:252
 [17] map(::Function, ::NamedTuple{(Symbol("##return#268"),), Tuple{Symbol}}, ::NamedTuple{(Symbol("##return#268"),), Tuple{CompositeComponent}}, ::NamedTuple{(Symbol("##return#268"),), Tuple{SpikingCircuits.SpikingSimulator.CompositeState}}, ::Vararg{NamedTuple, N} where N)
    @ Base ./namedtuple.jl:197
 [18] advance_time_by(c::CompositeComponent, s::SpikingCircuits.SpikingSimulator.CompositeState, t::SpikingCircuits.SpikingSimulator.CompositeTrajectory, Î”T::Float64, f::SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol}, Int64}, Symbol})
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:505
 [19] (::SpikingCircuits.SpikingSimulator.var"#40#47"{Float64, SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol}, Int64}})(name::Symbol, sc::CompositeComponent, ss::SpikingCircuits.SpikingSimulator.CompositeState, st::SpikingCircuits.SpikingSimulator.CompositeTrajectory)
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:506
 [20] map(::Function, ::Tuple{Symbol}, ::Tuple{CompositeComponent}, ::Tuple{SpikingCircuits.SpikingSimulator.CompositeState}, ::Vararg{Tuple, N} where N)
    @ Base ./tuple.jl:252
 [21] map(::Function, ::NamedTuple{(:sub_gen_fns,), Tuple{Symbol}}, ::NamedTuple{(:sub_gen_fns,), Tuple{CompositeComponent}}, ::NamedTuple{(:sub_gen_fns,), Tuple{SpikingCircuits.SpikingSimulator.CompositeState}}, ::Vararg{NamedTuple, N} where N)
    @ Base ./namedtuple.jl:197
 [22] advance_time_by(c::CompositeComponent, s::SpikingCircuits.SpikingSimulator.CompositeState, t::SpikingCircuits.SpikingSimulator.CompositeTrajectory, Î”T::Float64, f::SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol}, Int64})
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:505
 [23] (::SpikingCircuits.SpikingSimulator.var"#40#47"{Float64, SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol}})(name::Int64, sc::CompositeComponent, ss::SpikingCircuits.SpikingSimulator.CompositeState, st::SpikingCircuits.SpikingSimulator.CompositeTrajectory)
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:506
 [24] map(::Function, ::Tuple{Int64, Int64}, ::Tuple{CompositeComponent, CompositeComponent}, ::Tuple{SpikingCircuits.SpikingSimulator.CompositeState, SpikingCircuits.SpikingSimulator.CompositeState}, ::Vararg{Tuple, N} where N)
    @ Base ./tuple.jl:252
 [25] advance_time_by(c::CompositeComponent, s::SpikingCircuits.SpikingSimulator.CompositeState, t::SpikingCircuits.SpikingSimulator.CompositeTrajectory, Î”T::Float64, f::SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}, Symbol})
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:505
 [26] (::SpikingCircuits.SpikingSimulator.var"#40#47"{Float64, SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol}})(name::Symbol, sc::CompositeComponent, ss::SpikingCircuits.SpikingSimulator.CompositeState, st::SpikingCircuits.SpikingSimulator.CompositeTrajectory)
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:506
 [27] map(::Function, ::Tuple{Symbol}, ::Tuple{CompositeComponent}, ::Tuple{SpikingCircuits.SpikingSimulator.CompositeState}, ::Vararg{Tuple, N} where N)
    @ Base ./tuple.jl:252
 [28] map(::Function, ::NamedTuple{(:sub_gen_fns,), Tuple{Symbol}}, ::NamedTuple{(:sub_gen_fns,), Tuple{CompositeComponent}}, ::NamedTuple{(:sub_gen_fns,), Tuple{SpikingCircuits.SpikingSimulator.CompositeState}}, ::Vararg{NamedTuple, N} where N)
    @ Base ./namedtuple.jl:197
 [29] advance_time_by(c::CompositeComponent, s::SpikingCircuits.SpikingSimulator.CompositeState, t::SpikingCircuits.SpikingSimulator.CompositeTrajectory, Î”T::Float64, f::SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}, Symbol})
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:505
 [30] (::SpikingCircuits.SpikingSimulator.var"#40#47"{Float64, SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol}})(name::Symbol, sc::CompositeComponent, ss::SpikingCircuits.SpikingSimulator.CompositeState, st::SpikingCircuits.SpikingSimulator.CompositeTrajectory)
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:506
 [31] map(::Function, ::Tuple{Symbol, Symbol}, ::Tuple{CompositeComponent, CompositeComponent}, ::Tuple{SpikingCircuits.SpikingSimulator.CompositeState, SpikingCircuits.SpikingSimulator.CompositeState}, ::Vararg{Tuple, N} where N)
    @ Base ./tuple.jl:252
 [32] map(::Function, ::NamedTuple{(Symbol("##y2#278"), :vec1, Symbol("##y1#274"), :vec2, Symbol("##sumvec#284"), Symbol("##output#289")), NTuple{6, Symbol}}, ::NamedTuple{(Symbol("##y2#278"), :vec1, Symbol("##y1#274"), :vec2, Symbol("##sumvec#284"), Symbol("##output#289")), NTuple{6, CompositeComponent}}, ::NamedTuple{(Symbol("##y2#278"), :vec1, Symbol("##y1#274"), :vec2, Symbol("##sumvec#284"), Symbol("##output#289")), NTuple{6, SpikingCircuits.SpikingSimulator.CompositeState}}, ::Vararg{NamedTuple, N} where N)
    @ Base ./namedtuple.jl:197
 [33] advance_time_by(c::CompositeComponent, s::SpikingCircuits.SpikingSimulator.CompositeState, t::SpikingCircuits.SpikingSimulator.CompositeTrajectory, Î”T::Float64, f::SpikingCircuits.SpikingSimulator.var"#nested#36"{SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}, Symbol})
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:505
 [34] (::SpikingCircuits.SpikingSimulator.var"#40#47"{Float64, SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}}})(name::Symbol, sc::CompositeComponent, ss::SpikingCircuits.SpikingSimulator.CompositeState, st::SpikingCircuits.SpikingSimulator.CompositeTrajectory)
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:506
 [35] map(::Function, ::Tuple{Symbol, Symbol}, ::Tuple{CompositeComponent, CompositeComponent}, ::Tuple{SpikingCircuits.SpikingSimulator.CompositeState, SpikingCircuits.SpikingSimulator.CompositeState}, ::Vararg{Tuple, N} where N)
    @ Base ./tuple.jl:252
 [36] map(::Function, ::NamedTuple{(:sub_gen_fns, :multipliers), Tuple{Symbol, Symbol}}, ::NamedTuple{(:sub_gen_fns, :multipliers), Tuple{CompositeComponent, CompositeComponent}}, ::NamedTuple{(:sub_gen_fns, :multipliers), Tuple{SpikingCircuits.SpikingSimulator.CompositeState, SpikingCircuits.SpikingSimulator.CompositeState}}, ::Vararg{NamedTuple, N} where N)
    @ Base ./namedtuple.jl:197
 [37] advance_time_by(c::CompositeComponent, s::SpikingCircuits.SpikingSimulator.CompositeState, t::SpikingCircuits.SpikingSimulator.CompositeTrajectory, Î”T::Float64, f::SpikingCircuits.SpikingSimulator.var"#9#16"{SpikingCircuits.SpikingSimulator.var"#filtered_callback#12"{SpikingCircuits.SpikingSimulator.var"#11#18", SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, Float64}})
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:505
 [38] simulate_for_time(callback::SpikingCircuits.SpikingSimulator.var"#callback#20"{Vector{Tuple{Float64, Union{Nothing, Integer, Symbol, Pair}, SpikingCircuits.SpikingSimulator.Event}}}, c::CompositeComponent, Î”T::Float64, s::SpikingCircuits.SpikingSimulator.CompositeState, t::SpikingCircuits.SpikingSimulator.CompositeTrajectory; initial_inputs::Tuple{Pair{Symbol, Pair{Symbol, Int64}}}, event_filter::Function)
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:351
 [39] simulate_for_time_and_get_events(::CompositeComponent, ::Vararg{Any, N} where N; kwargs::Base.Iterators.Pairs{Symbol, Tuple{Pair{Symbol, Pair{Symbol, Int64}}}, Tuple{Symbol}, NamedTuple{(:initial_inputs,), Tuple{Tuple{Pair{Symbol, Pair{Symbol, Int64}}}}}})
    @ SpikingCircuits.SpikingSimulator ~/Developer/research/SpikingCircuits.jl/src/simulator.jl:379
 [40] do_run_and_check_spike_rate(run_length::Float64, input_val::Int64)
    @ Main ./REPL[22]:2
 [41] #50
    @ ./none:0 [inlined]
 [42] iterate
    @ ./generator.jl:47 [inlined]
 [43] collect_to!(dest::Vector{Tuple{Float64, Float64}}, itr::Base.Generator{UnitRange{Int64}, var"#50#51"}, offs::Int64, st::Int64)
    @ Base ./array.jl:724
 [44] collect_to_with_first!(dest::Vector{Tuple{Float64, Float64}}, v1::Tuple{Float64, Float64}, itr::Base.Generator{UnitRange{Int64}, var"#50#51"}, st::Int64)
    @ Base ./array.jl:702
 [45] collect(itr::Base.Generator{UnitRange{Int64}, var"#50#51"})
    @ Base ./array.jl:683
 [46] top-level scope
    @ REPL[25]:1

julia> [do_run_and_check_spike_rate() for _=1:20]
^[[A^[[A^[[B^[[B

'


20-element Vector{Tuple{Float64, Float64}}:
 (0.324, 0.06666666666666667)
 (0.03600000000000001, 0.0)
 (0.08100000000000002, 0.0)
 (0.08100000000000002, 0.04)
 (0.08100000000000002, 0.0)
 (0.324, 0.06666666666666667)
 (0.324, 0.0)
 (0.324, 0.05333333333333334)
 (0.022500000000000003, 0.08)
 (0.324, 0.04)
 (0.324, 0.0)
 (0.324, 0.08)
 (0.324, 0.0)
 (0.022500000000000003, 0.0)
 (0.324, 0.0)
 (0.324, 0.013333333333333334)
 (0.08100000000000002, 0.0)
 (0.08100000000000002, 0.0)
 (0.324, 0.0)
 (0.324, 0.02666666666666667)

julia> 

julia> 

julia> '


ERROR: syntax: incomplete: invalid character literal
Stacktrace:
 [1] top-level scope
   @ none:1

julia> ans
20-element Vector{Tuple{Float64, Float64}}:
 (0.324, 0.06666666666666667)
 (0.03600000000000001, 0.0)
 (0.08100000000000002, 0.0)
 (0.08100000000000002, 0.04)
 (0.08100000000000002, 0.0)
 (0.324, 0.06666666666666667)
 (0.324, 0.0)
 (0.324, 0.05333333333333334)
 (0.022500000000000003, 0.08)
 (0.324, 0.04)
 (0.324, 0.0)
 (0.324, 0.08)
 (0.324, 0.0)
 (0.022500000000000003, 0.0)
 (0.324, 0.0)
 (0.324, 0.013333333333333334)
 (0.08100000000000002, 0.0)
 (0.08100000000000002, 0.0)
 (0.324, 0.0)
 (0.324, 0.02666666666666667)

julia> pairs = ans
20-element Vector{Tuple{Float64, Float64}}:
 (0.324, 0.06666666666666667)
 (0.03600000000000001, 0.0)
 (0.08100000000000002, 0.0)
 (0.08100000000000002, 0.04)
 (0.08100000000000002, 0.0)
 (0.324, 0.06666666666666667)
 (0.324, 0.0)
 (0.324, 0.05333333333333334)
 (0.022500000000000003, 0.08)
 (0.324, 0.04)
 (0.324, 0.0)
 (0.324, 0.08)
 (0.324, 0.0)
 (0.022500000000000003, 0.0)
 (0.324, 0.0)
 (0.324, 0.013333333333333334)
 (0.08100000000000002, 0.0)
 (0.08100000000000002, 0.0)
 (0.324, 0.0)
 (0.324, 0.02666666666666667)

julia> [b - a for (a, b) in pairs]
20-element Vector{Float64}:
 -0.25733333333333336
 -0.03600000000000001
 -0.08100000000000002
 -0.041000000000000016
 -0.08100000000000002
 -0.25733333333333336
 -0.324
 -0.27066666666666667
  0.057499999999999996
 -0.28400000000000003
 -0.324
 -0.244
 -0.324
 -0.022500000000000003
 -0.324
 -0.3106666666666667
 -0.08100000000000002
 -0.08100000000000002
 -0.324
 -0.29733333333333334

julia> [b - a for (a, b) in pairs] |> sum
-3.9073333333333338

julia> 
